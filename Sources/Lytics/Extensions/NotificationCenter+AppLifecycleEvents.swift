//
//  NotificationCenter+AppLifecycleEvents.swift
//
//  Created by Mathew Gacy on 10/22/22.
//

import Combine
import Foundation
import UIKit

extension NotificationCenter {

    /// An asynchronous sequence of app lifecycle events generated by a notification center.
    final class AppLifecycleEvents: AsyncSequence, AsyncIteratorProtocol {
        typealias Element = AppLifecycleEvent
        typealias AsyncIterator = AppLifecycleEvents

        private let stream: AsyncStream<AppLifecycleEvent>
        private lazy var iterator = stream.makeAsyncIterator()
        private var cancellable: AnyCancellable?

        init(_ publisher: AnyPublisher<AppLifecycleEvent, Never>) {
            var subscription: AnyCancellable? = nil

            stream = AsyncStream<AppLifecycleEvent>(AppLifecycleEvent.self) { continuation in
                subscription = publisher
                    .handleEvents(
                        receiveCancel: {
                            continuation.finish()
                        })
                    .sink(
                        receiveCompletion: { _ in
                            continuation.finish()
                        },
                        receiveValue: { value in
                            continuation.yield(value)
                        })
            }

            cancellable = subscription
        }

        func cancel() {
            cancellable?.cancel()
            cancellable = nil
        }

        func makeAsyncIterator() -> Self {
            self
        }

        func next() async throws -> AppLifecycleEvent? {
            await iterator.next()
        }
    }

    /// Returns an asynchronous sequence of app lifecycle events produced by this center.
    func lifecycleEvents() -> AppLifecycleEvents {
        let didBecomeActive = publisher(for: UIApplication.didBecomeActiveNotification)
            .map { _ in AppLifecycleEvent.didBecomeActive }

        let didEnterBackground = publisher(for: UIApplication.didEnterBackgroundNotification)
            .map { _ in AppLifecycleEvent.didEnterBackground }

        let willTerminate = publisher(for: UIApplication.willTerminateNotification)
            .map { _ in AppLifecycleEvent.willTerminate }

        return AppLifecycleEvents(
            Publishers.Merge3(didBecomeActive, didEnterBackground, willTerminate)
                .eraseToAnyPublisher())
    }
}
